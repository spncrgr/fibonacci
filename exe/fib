#!/usr/bin/env ruby
# frozen_string_literal: true

load File.expand_path('../init.rb', __dir__)

require 'thor'

# CLI for calculating Fibonacci numbers at a given sequence number.
class FibCLI < Thor
  map 'g' => :generate, 'c' => :calculate

  desc 'generate NUM', 'generate a Fibonacci sequence and return the NUMth number'
  long_desc <<-LONGDESC
  'fib generate NUM' will create a sequence of Fibonacci numbers NUM numbers in
  length. By default, 'fib generate' will return the last number in the sequence.

  Examples:
  \x5#Generate a sequence 10 numbers in length and return the value of the 10th item in the sequence (i.e. 55).
  \x5\x5  > $ fib generate 10       #=> 55

  #Generate a sequence 10 numbers in length and return the value of the 6th item in the sequence (i.e. 8).
  \x5\x5  > $ fib generate 10 -V 6  #=> 8
  LONGDESC
  option :value_at,
         type:    :numeric,
         desc:    'Return the Nth item in the sequence',
         aliases: '-V'

  def generate(num)
    sequence_number = num.to_i
    value_at        = options[:value_at] || sequence_number
    puts "Generating a sequence of #{sequence_number} Fibonacci number(s)..."

    bench_result = run_with_benchmarks do
      @fib = Fibonacci.new(sequence_number)
    end
    puts "The Fibonacci number at entry #{value_at} is #{@fib.value_at(value_at)}"
    puts "\nTime:"
    puts bench_result.string
  end

  desc 'calculate NUM', 'Return the NUMth item in a standard Fibonacci sequence'
  long_desc <<-LONGDESC
  'fib calculate NUM' will calculate the NUMth number of a standard Fibonacci sequence (i.e. 1, 1, 2, ...). However,
  unlike 'fib generate', the sequence will not be generated.

  Example:
  \x5#Calculate the 10th Fibonacci number of a standard sequence (i.e. 55)
  \x5  > $ fib calculate 10      #=> 55
  LONGDESC

  def calculate(num)
    sequence_number = num.to_i
    bench_result = run_with_benchmarks do
      @fib_number = Fibonacci.value_at(sequence_number)
    end
    puts <<~OUT
      The Fibonacci number at position #{sequence_number} of a standard
      sequence is #{@fib_number.to_i}
    OUT
    puts "\nTime:"
    puts bench_result.string
  end

  private

    # Execute code, wrapped by a Benchmark operation, and capture the output so that it can be printed last.
    def run_with_benchmarks
      original_stdout = $stdout
      # Redirect $stdout to a variable that can be printed later
      temp_stdout     = StringIO.new
      $stdout         = temp_stdout

      require 'benchmark'
      Benchmark.bm do |x|
        x.report { yield } if block_given?
      end

      # Restore $stdout
      $stdout = original_stdout
      temp_stdout
    end
end

FibCLI.start(ARGV)
